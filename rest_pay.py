import streamlit as st
import pandas as pd

def calculate_debts():
    st.title("üçΩÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ–ª–≥–æ–≤ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ")
    st.write("–†–∞—Å—Å—á–∏—Ç–∞–µ–º, –∫—Ç–æ —Å–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–µ–Ω –ø–æ—Å–ª–µ –≤–µ—á–µ—Ä–∞ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ")

    # –í–≤–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    st.header("1. –£—á–∞—Å—Ç–Ω–∏–∫–∏")
    num_people = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫", min_value=2, max_value=20, value=4)
    
    people = []
    for i in range(num_people):
        name = st.text_input(f"–ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {i+1}", value=f"–£—á–∞—Å—Ç–Ω–∏–∫ {i+1}")
        people.append(name)

    # –í–≤–æ–¥ –∑–∞–∫–∞–∑–æ–≤
    st.header("2. –ó–∞–∫–∞–∑—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã")
    st.write("–£–∫–∞–∂–∏—Ç–µ, –∫—Ç–æ —á—Ç–æ –∑–∞–∫–∞–∑—ã–≤–∞–ª –∏ —Å–∫–æ–ª—å–∫–æ —ç—Ç–æ —Å—Ç–æ–∏–ª–æ")

    orders = []
    if 'orders_df' not in st.session_state:
        st.session_state.orders_df = pd.DataFrame(columns=["–ü–æ–∑–∏—Ü–∏—è", "–°—Ç–æ–∏–º–æ—Å—Ç—å", "–ö—Ç–æ –µ–ª"])

    with st.form("order_form"):
        item = st.text_input("–ü–æ–∑–∏—Ü–∏—è –≤ –º–µ–Ω—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞')")
        cost = st.number_input("–°—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±)", min_value=0, value=500)
        consumers = st.multiselect("–ö—Ç–æ –µ–ª —ç—Ç—É –ø–æ–∑–∏—Ü–∏—é", people)
        
        submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑")
        if submitted and item and cost > 0 and consumers:
            new_order = {
                "–ü–æ–∑–∏—Ü–∏—è": item,
                "–°—Ç–æ–∏–º–æ—Å—Ç—å": cost,
                "–ö—Ç–æ –µ–ª": ", ".join(consumers),
                "–ù–∞ —á–µ–ª–æ–≤–µ–∫–∞": cost / len(consumers) if len(consumers) > 0 else 0
            }
            st.session_state.orders_df = pd.concat([
                st.session_state.orders_df, 
                pd.DataFrame([new_order])
            ], ignore_index=True)

    # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    if not st.session_state.orders_df.empty:
        st.subheader("–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã")
        st.dataframe(st.session_state.orders_df)
        
        if st.button("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã"):
            st.session_state.orders_df = pd.DataFrame(columns=["–ü–æ–∑–∏—Ü–∏—è", "–°—Ç–æ–∏–º–æ—Å—Ç—å", "–ö—Ç–æ –µ–ª"])
            st.rerun()

    # –†–∞—Å—á–µ—Ç –¥–æ–ª–≥–æ–≤
    if not st.session_state.orders_df.empty:
        st.header("3. –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã")
        
        # –†–∞—Å—Å—á–µ—Ç –¥–æ–ª–≥–æ–≤
        debts = {person: 0 for person in people}
        for _, row in st.session_state.orders_df.iterrows():
            cost_per_person = row['–°—Ç–æ–∏–º–æ—Å—Ç—å'] / len(row['–ö—Ç–æ –µ–ª'].split(', '))
            for person in row['–ö—Ç–æ –µ–ª'].split(', '):
                debts[person.strip()] += cost_per_person
        
        # –†–∞—Å—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Å—á–µ—Ç–∞
        total = sum(debts.values())
        st.subheader(f"–û–±—â–∏–π —Å—á–µ—Ç: {total:.2f} —Ä—É–±")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–ª–≥–∏ –∫–∞–∂–¥–æ–≥–æ
        st.subheader("–î–æ–ª–≥–∏ –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞:")
        debts_df = pd.DataFrame.from_dict(debts, orient='index', columns=['–î–æ–ª–≥'])
        debts_df["–î–æ–ª–≥"] = debts_df["–î–æ–ª–≥"].round(2)
        st.dataframe(debts_df)
        
        # –†–∞—Å—Å—á–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        st.subheader("–ö–æ–º—É —Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏:")
        avg = total / len(people)
        payers = {p: d - avg for p, d in debts.items()}
        
        transactions = []
        debtors = {p: a for p, a in payers.items() if a < 0}
        creditors = {p: a for p, a in payers.items() if a > 0}
        
        for creditor, amount in creditors.items():
            remaining = amount
            for debtor, debt in debtors.items():
                if remaining <= 0:
                    break
                if debt < 0:
                    transfer = min(remaining, -debt)
                    transactions.append({
                        "–û—Ç": debtor,
                        "–ö–æ–º—É": creditor,
                        "–°—É–º–º–∞": transfer
                    })
                    remaining -= transfer
                    debtors[debtor] += transfer
        
        transactions_df = pd.DataFrame(transactions)
        st.dataframe(transactions_df)

if __name__ == "__main__":
    calculate_debts()
