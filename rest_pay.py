import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
from gspread_dataframe import set_with_dataframe
import locale
from datetime import datetime

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∏—Å–µ–ª –∏ –¥–∞—Ç
try:
    locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')  # –†—É—Å—Å–∫–∞—è –ª–æ–∫–∞–ª—å –¥–ª—è –∑–∞–ø—è—Ç—ã—Ö –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç
except locale.Error:
    locale.setlocale(locale.LC_ALL, '')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –ª–æ–∫–∞–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
SHEET_ID = "12vLykJcM1y_mO8yFcrk8sqXcDa915vH1UbrrKYvncFk"
WORKSHEET_NAME = "test"
DEFAULT_PEOPLE = ["–ò—Ö–∞", "–í–ª–∞–¥", "–õ–æ–∫–∏"]

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
@st.cache_resource
def connect_to_gsheet():
    scopes = [
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive"
    ]
    credentials = Credentials.from_service_account_info(
        st.secrets["gcp_service_account"],
        scopes=scopes
    )
    return gspread.authorize(credentials)

def safe_float(value):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ float, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è –∑–∞–ø—è—Ç—É—é –∏ —Ç–æ—á–∫—É –∫–∞–∫ –¥–µ—Å—è—Ç–∏—á–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å"""
    if value in [None, "", " "]:
        return 0.0
    try:
        # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á
        if isinstance(value, str):
            value = value.replace(',', '.').replace(' ', '')
        return float(value)
    except (ValueError, TypeError):
        return 0.0

def parse_date(value):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç datetime, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"""
    if value in [None, "", " "]:
        return None
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        return pd.to_datetime(value, dayfirst=True)
    except (ValueError, TypeError):
        return None

def get_sheet_data():
    try:
        client = connect_to_gsheet()
        sheet = client.open_by_key(SHEET_ID).worksheet(WORKSHEET_NAME)
        data = sheet.get_all_records()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã
        processed_data = []
        for row in data:
            processed_row = {
                "–ö—Ç–æ –ø–ª–∞—Ç–∏–ª": str(row.get("–ö—Ç–æ –ø–ª–∞—Ç–∏–ª", "")),
                "–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞—Ç": str(row.get("–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞—Ç", "")),
                "–°—É–º–º–∞ —á–µ–∫–∞": safe_float(row.get("–°—É–º–º–∞ —á–µ–∫–∞", 0)),
                "–î–∞—Ç–∞": parse_date(row.get("–î–∞—Ç–∞", "")),  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞—Ç—ã
                **{p: int(row.get(p, 0)) if row.get(p, 0) in [1, 0] else 0 
                   for p in DEFAULT_PEOPLE}
            }
            processed_data.append(processed_row)
            
        df = pd.DataFrame(processed_data)
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        df['–î–∞—Ç–∞'] = df['–î–∞—Ç–∞'].dt.strftime('%d.%m.%Y') if '–î–∞—Ç–∞' in df.columns else None
        return df, sheet
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        return pd.DataFrame(columns=["–ö—Ç–æ –ø–ª–∞—Ç–∏–ª", "–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞—Ç", "–°—É–º–º–∞ —á–µ–∫–∞", "–î–∞—Ç–∞"] + DEFAULT_PEOPLE), None

def update_sheet(sheet, df):
    if sheet is None:
        return
    try:
        sheet.clear()
        set_with_dataframe(sheet, df)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")

def calculate_debts(df):
    if df.empty:
        return pd.DataFrame(columns=["–£—á–∞—Å—Ç–Ω–∏–∫", "–ë–∞–ª–∞–Ω—Å"])
    
    total_spent = {p: 0.0 for p in DEFAULT_PEOPLE}
    total_share = {p: 0.0 for p in DEFAULT_PEOPLE}
    
    for _, row in df.iterrows():
        payer = str(row.get("–ö—Ç–æ –ø–ª–∞—Ç–∏–ª", ""))
        if payer not in DEFAULT_PEOPLE:
            continue
            
        amount = safe_float(row.get("–°—É–º–º–∞ —á–µ–∫–∞", 0))
        total_spent[payer] += amount
        
        participants = [p for p in DEFAULT_PEOPLE if int(row.get(p, 0)) == 1]
        if participants:
            share = amount / len(participants)
            for p in participants:
                total_share[p] += share
    
    balances = {p: round(total_spent[p] - total_share[p], 2) for p in DEFAULT_PEOPLE}
    return pd.DataFrame({
        "–£—á–∞—Å—Ç–Ω–∏–∫": balances.keys(),
        "–ë–∞–ª–∞–Ω—Å": balances.values()
    })

def main():
    st.title("üçΩÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ–ª–≥–æ–≤")
    
    df, sheet = get_sheet_data()
    
    tab1, tab2 = st.tabs(["–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—ã", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"])
    
    with tab1:
        with st.form(key="expense_form", clear_on_submit=True):
            payer = st.selectbox("–ö—Ç–æ –æ–ø–ª–∞—Ç–∏–ª", DEFAULT_PEOPLE)
            description = st.text_input("–û–ø–∏—Å–∞–Ω–∏–µ")
            amount = st.number_input("–°—É–º–º–∞", min_value=0.0, value=1000.0, format="%.2f")
            date = st.date_input("–î–∞—Ç–∞", value=datetime.today())
            
            st.write("–£—á–∞—Å—Ç–Ω–∏–∫–∏:")
            participants = {p: st.checkbox(p, value=True, key=f"part_{p}") 
                          for p in DEFAULT_PEOPLE}
            
            if st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å"):
                if not description:
                    st.error("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
                else:
                    new_row = {
                        "–ö—Ç–æ –ø–ª–∞—Ç–∏–ª": payer,
                        "–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞—Ç": description,
                        "–°—É–º–º–∞ —á–µ–∫–∞": safe_float(amount),
                        "–î–∞—Ç–∞": date.strftime('%d.%m.%Y'),
                        **{p: 1 if participants[p] else 0 for p in DEFAULT_PEOPLE}
                    }
                    df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
                    update_sheet(sheet, df)
                    st.success("–î–æ–±–∞–≤–ª–µ–Ω–æ!")
                    st.rerun()
    
    with tab2:
        if not df.empty:
            edited_df = st.data_editor(
                df,
                column_config={
                    "–ö—Ç–æ –ø–ª–∞—Ç–∏–ª": st.column_config.SelectboxColumn(options=DEFAULT_PEOPLE),
                    "–°—É–º–º–∞ —á–µ–∫–∞": st.column_config.NumberColumn(format="%.2f"),
                    "–î–∞—Ç–∞": st.column_config.DateColumn(format="DD.MM.YYYY"),
                    **{p: st.column_config.CheckboxColumn() for p in DEFAULT_PEOPLE}
                },
                num_rows="dynamic",
                key="editor"
            )
            
            if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
                df = edited_df
                update_sheet(sheet, df)
                st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
                st.rerun()
                
            balances = calculate_debts(df)
            st.dataframe(balances)
            
            # –†–∞—Å—á–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤
            debtors = balances[balances["–ë–∞–ª–∞–Ω—Å"] < 0]
            creditors = balances[balances["–ë–∞–ª–∞–Ω—Å"] > 0]
            
            transactions = []
            for _, creditor in creditors.iterrows():
                for _, debtor in debtors.iterrows():
                    amount = min(creditor["–ë–∞–ª–∞–Ω—Å"], -debtor["–ë–∞–ª–∞–Ω—Å"])
                    if amount > 1:
                        transactions.append({
                            "–û—Ç": debtor["–£—á–∞—Å—Ç–Ω–∏–∫"],
                            "–ö–æ–º—É": creditor["–£—á–∞—Å—Ç–Ω–∏–∫"],
                            "–°—É–º–º–∞": round(amount, 2)
                        })
            
            if transactions:
                st.dataframe(pd.DataFrame(transactions))
            else:
                st.success("–ë–∞–ª–∞–Ω—Å —Å–≤–µ–¥–µ–Ω")
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    main()
