import streamlit as st
import pandas as pd
import json
from io import BytesIO

def save_data_to_json():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ"""
    data = {
        'people': st.session_state.people,
        'bills': st.session_state.bills.to_dict('records')
    }
    return json.dumps(data)

def load_data_from_json(uploaded_file):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    data = json.load(uploaded_file)
    st.session_state.people = data['people']
    st.session_state.bills = pd.DataFrame(data['bills'])

def calculate_debts():
    st.title("üçΩÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ–ª–≥–æ–≤ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ")
    st.write("–†–∞—Å—Å—á–∏—Ç–∞–µ–º, –∫—Ç–æ —Å–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–µ–Ω –ø–æ—Å–ª–µ –≤–µ—á–µ—Ä–∞ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ session state
    if 'people' not in st.session_state:
        st.session_state.people = ["–ò—Ö–∞", "–õ–æ–∫–∏", "–í–ª–∞–¥"]
    if 'bills' not in st.session_state:
        st.session_state.bills = pd.DataFrame(columns=["–ó–∞–≤–µ–¥–µ–Ω–∏–µ", "–°—É–º–º–∞", "–û–ø–ª–∞—Ç–∏–≤—à–∏–π", "–£—á–∞—Å—Ç–Ω–∏–∫–∏"])

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
    st.header("1. –£—á–∞—Å—Ç–Ω–∏–∫–∏")
    
    col1, col2 = st.columns(2)
    with col1:
        new_person = st.text_input("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞")
        if st.button("–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞") and new_person:
            st.session_state.people.append(new_person)
            st.rerun()
    
    with col2:
        if st.session_state.people:
            to_remove = st.selectbox("–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", st.session_state.people)
            if st.button("–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"):
                st.session_state.people.remove(to_remove)
                st.rerun()

    st.write("–¢–µ–∫—É—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:", ", ".join(st.session_state.people))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤
    st.header("2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤")
    
    with st.form("bill_form"):
        place = st.text_input("–ó–∞–≤–µ–¥–µ–Ω–∏–µ (–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞/–±–∞—Ä–∞)")
        amount = st.number_input("–°—É–º–º–∞ —Å—á—ë—Ç–∞ (—Ä—É–±)", min_value=1, value=1000)
        payer = st.selectbox("–ö—Ç–æ –æ–ø–ª–∞—Ç–∏–ª", st.session_state.people)
        
        # –í—ã–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å—á–µ—Ç–∞
        default_consumers = st.session_state.people
        consumers = st.multiselect(
            "–ö—Ç–æ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ)", 
            st.session_state.people, 
            default=default_consumers
        )
        
        submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å —Å—á—ë—Ç")
        if submitted and place and amount and payer and consumers:
            new_bill = {
                "–ó–∞–≤–µ–¥–µ–Ω–∏–µ": place,
                "–°—É–º–º–∞": amount,
                "–û–ø–ª–∞—Ç–∏–≤—à–∏–π": payer,
                "–£—á–∞—Å—Ç–Ω–∏–∫–∏": ", ".join(consumers),
                "–î–æ–ª—è –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞": amount / len(consumers) if consumers else 0
            }
            st.session_state.bills = pd.concat([
                st.session_state.bills, 
                pd.DataFrame([new_bill])
            ], ignore_index=True)
            st.rerun()

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞–º–∏
    if not st.session_state.bills.empty:
        st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞–º–∏")
        
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        st.download_button(
            label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
            data=save_data_to_json(),
            file_name="restaurant_bills.json",
            mime="application/json"
        )
        
        # –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", type="json")
        if uploaded_file is not None:
            load_data_from_json(uploaded_file)
            st.rerun()
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤
        col1, col2 = st.columns(2)
        with col1:
            if st.button("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å—á–µ—Ç–∞"):
                st.session_state.bills = pd.DataFrame(columns=["–ó–∞–≤–µ–¥–µ–Ω–∏–µ", "–°—É–º–º–∞", "–û–ø–ª–∞—Ç–∏–≤—à–∏–π", "–£—á–∞—Å—Ç–Ω–∏–∫–∏"])
                st.rerun()
        
        with col2:
            if not st.session_state.bills.empty:
                bill_to_remove = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                    st.session_state.bills["–ó–∞–≤–µ–¥–µ–Ω–∏–µ"] + " (" + st.session_state.bills["–°—É–º–º–∞"].astype(str) + " —Ä—É–±)"
                )
                if st.button("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—á—ë—Ç"):
                    index_to_remove = st.session_state.bills.index[
                        (st.session_state.bills["–ó–∞–≤–µ–¥–µ–Ω–∏–µ"] + " (" + st.session_state.bills["–°—É–º–º–∞"].astype(str) + " —Ä—É–±)") == bill_to_remove
                    ].tolist()[0]
                    st.session_state.bills = st.session_state.bills.drop(index_to_remove).reset_index(drop=True)
                    st.rerun()

        st.subheader("–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—á–µ—Ç–∞")
        st.dataframe(st.session_state.bills)

    # –†–∞—Å—á–µ—Ç –¥–æ–ª–≥–æ–≤
    if not st.session_state.bills.empty and st.session_state.people:
        st.header("3. –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã")
        
        # –†–∞—Å—Å—á–µ—Ç: —Å–∫–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–π –¥–æ–ª–∂–µ–Ω –≤ –∏–¥–µ–∞–ª–µ
        total_spent = {person: 0 for person in st.session_state.people}
        total_share = {person: 0 for person in st.session_state.people}
        
        for _, bill in st.session_state.bills.iterrows():
            # –ö—Ç–æ –æ–ø–ª–∞—Ç–∏–ª
            payer = bill['–û–ø–ª–∞—Ç–∏–≤—à–∏–π']
            total_spent[payer] += bill['–°—É–º–º–∞']
            
            # –î–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participants = bill['–£—á–∞—Å—Ç–Ω–∏–∫–∏'].split(', ')
            share = bill['–°—É–º–º–∞'] / len(participants)
            for person in participants:
                total_share[person.strip()] += share
        
        # –û–±—â–∞—è —Å—É–º–º–∞
        total = sum(total_spent.values())
        st.subheader(f"–û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total:.2f} —Ä—É–±")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–π –æ–ø–ª–∞—Ç–∏–ª –∏ –µ–≥–æ –¥–æ–ª—é
        st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º:")
        stats_df = pd.DataFrame({
            "–£—á–∞—Å—Ç–Ω–∏–∫": st.session_state.people,
            "–û–ø–ª–∞—Ç–∏–ª": [total_spent[p] for p in st.session_state.people],
            "–î–æ–ª—è": [total_share[p] for p in st.session_state.people],
            "–ë–∞–ª–∞–Ω—Å": [round(total_spent[p] - total_share[p], 2) for p in st.session_state.people]
        })
        st.dataframe(stats_df)
        
        # –†–∞—Å—Å—á–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        st.subheader("–ö–æ–º—É —Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏:")
        
        balances = {p: total_spent[p] - total_share[p] for p in st.session_state.people}
        debtors = {p: -b for p, b in balances.items() if b < 0}
        creditors = {p: b for p, b in balances.items() if b > 0}
        
        transactions = []
        for creditor, amount in creditors.items():
            remaining = amount
            for debtor in debtors:
                if remaining <= 0:
                    break
                if debtors[debtor] > 0:
                    transfer = min(remaining, debtors[debtor])
                    if transfer > 1:  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã –º–µ–Ω—å—à–µ 1 —Ä—É–±–ª—è
                        transactions.append({
                            "–û—Ç": debtor,
                            "–ö–æ–º—É": creditor,
                            "–°—É–º–º–∞": round(transfer, 2)
                        })
                        remaining -= transfer
                        debtors[debtor] -= transfer
        
        if transactions:
            transactions_df = pd.DataFrame(transactions)
            st.dataframe(transactions_df)
        else:
            st.success("–í—Å–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ, –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è!")

if __name__ == "__main__":
    calculate_debts()
