import streamlit as st
import pandas as pd
import gspread
from gspread_dataframe import set_with_dataframe
from google.oauth2.service_account import Credentials



# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
SHEET_ID = "1M2OrKITimaLlWAs3yTqchsESFNdUxitZnfQ65k4bIXI"
WORKSHEET_NAME = "test"

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
@st.cache_resource
def connect_to_gsheet():
    scopes = [
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive"
    ]
    
    credentials = Credentials.from_service_account_info(
        st.secrets["gcp_service_account"],
        scopes=scopes
    )
    client = gspread.authorize(credentials)
    return client

'''
def get_sheet_data():
    client = connect_to_gsheet()
    sheet = client.open_by_key(SHEET_ID).worksheet(WORKSHEET_NAME)
    data = sheet.get_all_records()
    return pd.DataFrame(data), sheet
'''
def get_sheet_data():
    client = connect_to_gsheet()
    sheet = client.open_by_key(SHEET_ID).worksheet(WORKSHEET_NAME)
    
    # –í–∞—Ä–∏–∞–Ω—Ç 1: —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    expected_headers = ["–ö—Ç–æ –ø–ª–∞—Ç–∏–ª", "–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞—Ç", "–°—É–º–º–∞ —á–µ–∫–∞", "–ò—Ö–∞", "–í–ª–∞–¥", "–õ–æ–∫–∏"]
    data = sheet.get_all_records(expected_headers=expected_headers)
    
    # –í–∞—Ä–∏–∞–Ω—Ç 2: —Ä—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–Ω–∞–¥–µ–∂–Ω–µ–µ)
    raw_data = sheet.get_all_values()
    if not raw_data:
        return pd.DataFrame(columns=expected_headers), sheet
        
    headers = raw_data[0]
    records = raw_data[1:]
    df = pd.DataFrame(records, columns=headers)
    
    return df, sheet

def update_sheet(sheet, df):
    # –û—á–∏—â–∞–µ–º –ª–∏—Å—Ç, –∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    sheet.clear()
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    set_with_dataframe(sheet, df)

def calculate_debts():
    st.title("üçΩÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ–ª–≥–æ–≤ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π Google Sheets")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
    try:
        df, sheet = get_sheet_data()
        st.session_state.people = [col for col in df.columns if col not in ["–ö—Ç–æ –ø–ª–∞—Ç–∏–ª", "–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞—Ç", "–°—É–º–º–∞ —á–µ–∫–∞"]]
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        df = pd.DataFrame(columns=["–ö—Ç–æ –ø–ª–∞—Ç–∏–ª", "–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞—Ç", "–°—É–º–º–∞ —á–µ–∫–∞"] + ["–ò—Ö–∞", "–í–ª–∞–¥", "–õ–æ–∫–∏"])
        st.session_state.people = ["–ò—Ö–∞", "–í–ª–∞–¥", "–õ–æ–∫–∏"]
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    st.header("1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç—Ä–∞—Ç")
    
    with st.form("expense_form"):
        payer = st.selectbox("–ö—Ç–æ –ø–ª–∞—Ç–∏–ª", st.session_state.people)
        description = st.text_input("–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞—Ç (–º–µ—Å—Ç–æ/—Ä–µ—Å—Ç–æ—Ä–∞–Ω)")
        amount = st.number_input("–°—É–º–º–∞ —á–µ–∫–∞", min_value=1, value=1000)
        
        st.write("–ö—Ç–æ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —ç—Ç–æ–π —Ç—Ä–∞—Ç–µ:")
        participants = {}
        cols = st.columns(3)
        for i, person in enumerate(st.session_state.people):
            with cols[i % 3]:
                participants[person] = st.checkbox(person, value=True, key=f"part_{person}")
        
        submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É")
        
        if submitted:
            new_row = {
                "–ö—Ç–æ –ø–ª–∞—Ç–∏–ª": payer,
                "–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞—Ç": description,
                "–°—É–º–º–∞ —á–µ–∫–∞": amount
            }
            for person in st.session_state.people:
                new_row[person] = 1 if participants[person] else 0
            
            df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
            try:
                update_sheet(sheet, df)
                st.success("–¢—Ä–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google Sheets!")
                st.rerun()
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    # –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    st.header("2. –¢–µ–∫—É—â–∏–µ —Ç—Ä–∞—Ç—ã")
    st.dataframe(df)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç
    st.header("3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏")
    
    if not df.empty:
        with st.expander("–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã"):
            selected_indices = st.multiselect(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–ø–æ –æ–ø–∏—Å–∞–Ω–∏—é)",
                df["–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞—Ç"] + " (" + df["–°—É–º–º–∞ —á–µ–∫–∞"].astype(str) + " —Ä—É–±)"
            )
            
            if st.button("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ"):
                mask = ~(df["–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞—Ç"] + " (" + df["–°—É–º–º–∞ —á–µ–∫–∞"].astype(str) + " —Ä—É–±)").isin(selected_indices)
                df = df[mask]
                try:
                    update_sheet(sheet, df)
                    st.success("–¢—Ä–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã!")
                    st.rerun()
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    # –†–∞—Å—á–µ—Ç –¥–æ–ª–≥–æ–≤
    st.header("4. –†–∞—Å—á–µ—Ç –¥–æ–ª–≥–æ–≤")
    
    if not df.empty:
        # –†–∞—Å—Å—á–µ—Ç: —Å–∫–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–π –¥–æ–ª–∂–µ–Ω –≤ –∏–¥–µ–∞–ª–µ
        total_spent = {person: 0 for person in st.session_state.people}
        total_share = {person: 0 for person in st.session_state.people}
        
        for _, row in df.iterrows():
            # –ö—Ç–æ –æ–ø–ª–∞—Ç–∏–ª
            payer = row['–ö—Ç–æ –ø–ª–∞—Ç–∏–ª']
            total_spent[payer] += row['–°—É–º–º–∞ —á–µ–∫–∞']
            
            # –î–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participants = [p for p in st.session_state.people if row[p] == 1]
            if participants:
                share = row['–°—É–º–º–∞ —á–µ–∫–∞'] / len(participants)
                for person in participants:
                    total_share[person] += share
        
        # –û–±—â–∞—è —Å—É–º–º–∞
        total = sum(total_spent.values())
        st.subheader(f"–û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total:.2f} —Ä—É–±")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–π –æ–ø–ª–∞—Ç–∏–ª –∏ –µ–≥–æ –¥–æ–ª—é
        st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º:")
        stats_df = pd.DataFrame({
            "–£—á–∞—Å—Ç–Ω–∏–∫": st.session_state.people,
            "–û–ø–ª–∞—Ç–∏–ª": [total_spent[p] for p in st.session_state.people],
            "–î–æ–ª—è": [total_share[p] for p in st.session_state.people],
            "–ë–∞–ª–∞–Ω—Å": [round(total_spent[p] - total_share[p], 2) for p in st.session_state.people]
        })
        st.dataframe(stats_df)
        
        # –†–∞—Å—Å—á–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        st.subheader("–ö–æ–º—É —Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏:")
        
        balances = {p: total_spent[p] - total_share[p] for p in st.session_state.people}
        debtors = {p: -b for p, b in balances.items() if b < 0}
        creditors = {p: b for p, b in balances.items() if b > 0}
        
        transactions = []
        for creditor, amount in creditors.items():
            remaining = amount
            for debtor in debtors:
                if remaining <= 0:
                    break
                if debtors[debtor] > 0:
                    transfer = min(remaining, debtors[debtor])
                    if transfer > 1:  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã –º–µ–Ω—å—à–µ 1 —Ä—É–±–ª—è
                        transactions.append({
                            "–û—Ç": debtor,
                            "–ö–æ–º—É": creditor,
                            "–°—É–º–º–∞": round(transfer, 2)
                        })
                        remaining -= transfer
                        debtors[debtor] -= transfer
        
        if transactions:
            transactions_df = pd.DataFrame(transactions)
            st.dataframe(transactions_df)
        else:
            st.success("–í—Å–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ, –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è!")

if __name__ == "__main__":
    # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–∫—Ä–µ—Ç—ã –≤ secrets.toml:
    # [gcp_service_account]
    # type = "service_account"
    # project_id = "..."
    # private_key_id = "..."
    # private_key = "-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n"
    # client_email = "..."
    # client_id = "..."
    # auth_uri = "https://accounts.google.com/o/oauth2/auth"
    # token_uri = "https://oauth2.googleapis.com/token"
    # auth_provider_x509_cert_url = "https://www.googleapis.com/oauth2/v1/certs"
    # client_x509_cert_url = "..."
    
    calculate_debts()
