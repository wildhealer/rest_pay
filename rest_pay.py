import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
from gspread_dataframe import set_with_dataframe

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
SHEET_ID = "12vLykJcM1y_mO8yFcrk8sqXcDa915vH1UbrrKYvncFk"
WORKSHEET_NAME = "test"

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
@st.cache_resource
def connect_to_gsheet():
    scopes = [
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive"
    ]
    
    credentials = Credentials.from_service_account_info(
        st.secrets["gcp_service_account"],
        scopes=scopes
    )
    client = gspread.authorize(credentials)
    return client

def get_sheet_data():
    client = connect_to_gsheet()
    sheet = client.open_by_key(SHEET_ID).worksheet(WORKSHEET_NAME)
    
    try:
        expected_headers = ["–ö—Ç–æ –ø–ª–∞—Ç–∏–ª", "–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞—Ç", "–°—É–º–º–∞ —á–µ–∫–∞", "–ò—Ö–∞", "–í–ª–∞–¥", "–õ–æ–∫–∏"]
        data = sheet.get_all_records(expected_headers=expected_headers)
        return pd.DataFrame(data), sheet
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return pd.DataFrame(columns=expected_headers), sheet

def update_sheet(sheet, df):
    sheet.clear()
    set_with_dataframe(sheet, df)

def calculate_debts(df):
    if df.empty or '–ò—Ö–∞' not in df.columns:
        return pd.DataFrame()
    
    total_spent = {'–ò—Ö–∞': 0, '–í–ª–∞–¥': 0, '–õ–æ–∫–∏': 0}
    total_share = {'–ò—Ö–∞': 0, '–í–ª–∞–¥': 0, '–õ–æ–∫–∏': 0}
    
    for _, row in df.iterrows():
        payer = row['–ö—Ç–æ –ø–ª–∞—Ç–∏–ª']
        total_spent[payer] += row['–°—É–º–º–∞ —á–µ–∫–∞']
        
        participants = [p for p in ['–ò—Ö–∞', '–í–ª–∞–¥', '–õ–æ–∫–∏'] if row[p] == 1]
        if participants:
            share = row['–°—É–º–º–∞ —á–µ–∫–∞'] / len(participants)
            for p in participants:
                total_share[p] += share
    
    balances = {p: total_spent[p] - total_share[p] for p in ['–ò—Ö–∞', '–í–ª–∞–¥', '–õ–æ–∫–∏']}
    return pd.DataFrame({
        '–£—á–∞—Å—Ç–Ω–∏–∫': balances.keys(),
        '–ë–∞–ª–∞–Ω—Å': [round(b, 2) for b in balances.values()]
    })

def main():
    st.title("üçΩÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ–ª–≥–æ–≤")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df, sheet = get_sheet_data()
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
    st.sidebar.header("–£—á–∞—Å—Ç–Ω–∏–∫–∏")
    if st.sidebar.button("–°–±—Ä–æ—Å–∏—Ç—å –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º"):
        st.session_state.people = ["–ò—Ö–∞", "–í–ª–∞–¥", "–õ–æ–∫–∏"]
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    tab1, tab2 = st.tabs(["–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—ã", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç–∞–º–∏"])
    
    with tab1:
        with st.form(key="expense_form", clear_on_submit=True):
            st.header("–ù–æ–≤–∞—è —Ç—Ä–∞—Ç–∞")
            
            payer = st.selectbox("–ö—Ç–æ –æ–ø–ª–∞—Ç–∏–ª", ["–ò—Ö–∞", "–í–ª–∞–¥", "–õ–æ–∫–∏"])
            description = st.text_input("–û–ø–∏—Å–∞–Ω–∏–µ")
            amount = st.number_input("–°—É–º–º–∞", min_value=1, value=1000)
            
            st.write("–£—á–∞—Å—Ç–Ω–∏–∫–∏:")
            cols = st.columns(3)
            participants = {}
            for i, person in enumerate(["–ò—Ö–∞", "–í–ª–∞–¥", "–õ–æ–∫–∏"]):
                with cols[i]:
                    participants[person] = st.checkbox(person, value=True, key=f"part_{i}")
            
            submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É")
            
            if submitted:
                if not description:
                    st.error("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
                else:
                    new_row = {
                        "–ö—Ç–æ –ø–ª–∞—Ç–∏–ª": payer,
                        "–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞—Ç": description,
                        "–°—É–º–º–∞ —á–µ–∫–∞": amount,
                        **{p: 1 if participants[p] else 0 for p in ["–ò—Ö–∞", "–í–ª–∞–¥", "–õ–æ–∫–∏"]}
                    }
                    df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
                    update_sheet(sheet, df)
                    st.success("–î–æ–±–∞–≤–ª–µ–Ω–æ!")
                    st.rerun()
    
    with tab2:
        st.header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç–∞–º–∏")
        
        if not df.empty:
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            edited_df = st.data_editor(
                df,
                column_config={
                    "–ö—Ç–æ –ø–ª–∞—Ç–∏–ª": st.column_config.SelectboxColumn(
                        "–ö—Ç–æ –ø–ª–∞—Ç–∏–ª",
                        options=["–ò—Ö–∞", "–í–ª–∞–¥", "–õ–æ–∫–∏"]
                    ),
                    "–°—É–º–º–∞ —á–µ–∫–∞": st.column_config.NumberColumn(
                        "–°—É–º–º–∞",
                        min_value=0
                    )
                },
                num_rows="dynamic",
                key="data_editor"
            )
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
                    update_sheet(sheet, edited_df)
                    st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
                    st.rerun()
            
            with col2:
                if st.button("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", type="primary"):
                    if len(st.session_state.data_editor["deleted_rows"]) > 0:
                        df = df.drop(st.session_state.data_editor["deleted_rows"])
                        update_sheet(sheet, df)
                        st.success("–£–¥–∞–ª–µ–Ω–æ!")
                        st.rerun()
                    else:
                        st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            
            # –†–∞—Å—á–µ—Ç –¥–æ–ª–≥–æ–≤
            st.header("–ë–∞–ª–∞–Ω—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            balances = calculate_debts(df)
            if not balances.empty:
                st.dataframe(balances)
                
                # –†–∞—Å—á–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤
                st.header("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã")
                debtors = balances[balances['–ë–∞–ª–∞–Ω—Å'] < 0]
                creditors = balances[balances['–ë–∞–ª–∞–Ω—Å'] > 0]
                
                transactions = []
                for _, creditor in creditors.iterrows():
                    for _, debtor in debtors.iterrows():
                        amount = min(creditor['–ë–∞–ª–∞–Ω—Å'], -debtor['–ë–∞–ª–∞–Ω—Å'])
                        if amount > 1:
                            transactions.append({
                                "–û—Ç": debtor['–£—á–∞—Å—Ç–Ω–∏–∫'],
                                "–ö–æ–º—É": creditor['–£—á–∞—Å—Ç–Ω–∏–∫'],
                                "–°—É–º–º–∞": round(amount, 2)
                            })
                
                if transactions:
                    st.dataframe(pd.DataFrame(transactions))
                else:
                    st.success("–ë–∞–ª–∞–Ω—Å —Å–≤–µ–¥–µ–Ω, –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞—Ç–∞—Ö")

if __name__ == "__main__":
    main()
