import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
from gspread_dataframe import set_with_dataframe

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
SHEET_ID = "1M2OrKITimaLlWAs3yTqchsESFNdUxitZnfQ65k4bIXI"
WORKSHEET_NAME = "test"

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
@st.cache_resource
def connect_to_gsheet():
    scopes = [
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive"
    ]
    
    credentials = Credentials.from_service_account_info(
        st.secrets["gcp_service_account"],
        scopes=scopes
    )
    client = gspread.authorize(credentials)
    return client

def get_sheet_data():
    client = connect_to_gsheet()
    sheet = client.open_by_key(SHEET_ID).worksheet(WORKSHEET_NAME)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    try:
        expected_headers = ["–ö—Ç–æ –ø–ª–∞—Ç–∏–ª", "–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞—Ç", "–°—É–º–º–∞ —á–µ–∫–∞", "–ò—Ö–∞", "–í–ª–∞–¥", "–õ–æ–∫–∏"]
        data = sheet.get_all_records(expected_headers=expected_headers)
        return pd.DataFrame(data), sheet
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame(columns=expected_headers), sheet

def update_sheet(sheet, df):
    sheet.clear()
    set_with_dataframe(sheet, df)

def calculate_debts():
    st.title("üçΩÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ–ª–≥–æ–≤ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π Google Sheets")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if 'people' not in st.session_state:
        st.session_state.people = ["–ò—Ö–∞", "–í–ª–∞–¥", "–õ–æ–∫–∏"]
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    try:
        df, sheet = get_sheet_data()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        df = pd.DataFrame(columns=["–ö—Ç–æ –ø–ª–∞—Ç–∏–ª", "–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞—Ç", "–°—É–º–º–∞ —á–µ–∫–∞"] + st.session_state.people)
        sheet = None

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
    st.header("1. –£—á–∞—Å—Ç–Ω–∏–∫–∏")
    col1, col2 = st.columns(2)
    
    with col1:
        new_person = st.text_input("–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", key="new_person_input")
        if st.button("–î–æ–±–∞–≤–∏—Ç—å", key="add_person_btn"):
            if new_person and new_person not in st.session_state.people:
                st.session_state.people.append(new_person)
                st.rerun()
    
    with col2:
        if st.session_state.people:
            to_remove = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", 
                st.session_state.people,
                key="remove_person_select"
            )
            if st.button("–£–¥–∞–ª–∏—Ç—å", key="remove_person_btn"):
                st.session_state.people.remove(to_remove)
                st.rerun()

    st.write("–¢–µ–∫—É—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:", ", ".join(st.session_state.people))

    # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç
    st.header("2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç")
    with st.form("expense_form", clear_on_submit=True):
        payer = st.selectbox(
            "–ö—Ç–æ –æ–ø–ª–∞—Ç–∏–ª", 
            st.session_state.people,
            key="payer_select"
        )
        description = st.text_input(
            "–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞—Ç (–º–µ—Å—Ç–æ/—Ä–µ—Å—Ç–æ—Ä–∞–Ω)", 
            key="description_input"
        )
        amount = st.number_input(
            "–°—É–º–º–∞ —á–µ–∫–∞", 
            min_value=1, 
            value=1000,
            key="amount_input"
        )
        
        st.write("–ö—Ç–æ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª:")
        participants = {}
        cols = st.columns(3)
        for i, person in enumerate(st.session_state.people):
            with cols[i % 3]:
                participants[person] = st.checkbox(
                    person, 
                    value=True, 
                    key=f"participant_{person}_{i}"
                )
        
        submitted = st.form_submit_button(
            "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É", 
            key="submit_expense_btn"
        )
        
        if submitted:
            if not description:
                st.error("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞—Ç")
            elif amount <= 0:
                st.error("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
            else:
                new_row = {
                    "–ö—Ç–æ –ø–ª–∞—Ç–∏–ª": payer,
                    "–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞—Ç": description,
                    "–°—É–º–º–∞ —á–µ–∫–∞": amount,
                    **{p: 1 if participants[p] else 0 for p in st.session_state.people}
                }
                
                try:
                    df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
                    if sheet:
                        update_sheet(sheet, df)
                    st.success("–¢—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")

    # –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
    st.header("3. –¢–µ–∫—É—â–∏–µ —Ç—Ä–∞—Ç—ã")
    if not df.empty:
        st.dataframe(df)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç
        st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏")
        selected_indices = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
            df["–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞—Ç"] + " (" + df["–°—É–º–º–∞ —á–µ–∫–∞"].astype(str) + " —Ä—É–±)",
            key="expenses_to_delete"
        )
        
        if st.button("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", key="delete_selected_btn"):
            if selected_indices:
                mask = ~(df["–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞—Ç"] + " (" + df["–°—É–º–º–∞ —á–µ–∫–∞"].astype(str) + " —Ä—É–±)").isin(selected_indices)
                df = df[mask]
                try:
                    if sheet:
                        update_sheet(sheet, df)
                    st.success("–¢—Ä–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã!")
                    st.rerun()
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
            else:
                st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

    # –†–∞—Å—á–µ—Ç –¥–æ–ª–≥–æ–≤
    if not df.empty and st.session_state.people:
        st.header("4. –†–∞—Å—á–µ—Ç –¥–æ–ª–≥–æ–≤")
        
        total_spent = {p: 0 for p in st.session_state.people}
        total_share = {p: 0 for p in st.session_state.people}
        
        for _, row in df.iterrows():
            payer = row['–ö—Ç–æ –ø–ª–∞—Ç–∏–ª']
            total_spent[payer] += row['–°—É–º–º–∞ —á–µ–∫–∞']
            
            participants = [p for p in st.session_state.people if row[p] == 1]
            if participants:
                share = row['–°—É–º–º–∞ —á–µ–∫–∞'] / len(participants)
                for p in participants:
                    total_share[p] += share
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total = sum(total_spent.values())
        st.subheader(f"–û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total:.2f} —Ä—É–±")
        
        st.subheader("–ë–∞–ª–∞–Ω—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:")
        balances = {p: total_spent[p] - total_share[p] for p in st.session_state.people}
        balances_df = pd.DataFrame({
            "–£—á–∞—Å—Ç–Ω–∏–∫": balances.keys(),
            "–ë–∞–ª–∞–Ω—Å": [round(b, 2) for b in balances.values()]
        })
        st.dataframe(balances_df)
        
        # –†–∞—Å—á–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        st.subheader("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã:")
        debtors = {p: -b for p, b in balances.items() if b < 0}
        creditors = {p: b for p, b in balances.items() if b > 0}
        
        transactions = []
        for creditor, amount in creditors.items():
            remaining = amount
            for debtor in debtors:
                if remaining <= 0:
                    break
                if debtors[debtor] > 0:
                    transfer = min(remaining, debtors[debtor])
                    if transfer > 1:
                        transactions.append({
                            "–û—Ç": debtor,
                            "–ö–æ–º—É": creditor,
                            "–°—É–º–º–∞": round(transfer, 2)
                        })
                        remaining -= transfer
                        debtors[debtor] -= transfer
        
        if transactions:
            st.dataframe(pd.DataFrame(transactions))
        else:
            st.success("–í—Å–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ!")

if __name__ == "__main__":
    calculate_debts()
